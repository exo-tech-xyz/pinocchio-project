/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';

export type Account = { somePubkey: Address };

export type AccountArgs = Account;

export function getAccountEncoder(): FixedSizeEncoder<AccountArgs> {
  return getStructEncoder([['somePubkey', getAddressEncoder()]]);
}

export function getAccountDecoder(): FixedSizeDecoder<Account> {
  return getStructDecoder([['somePubkey', getAddressDecoder()]]);
}

export function getAccountCodec(): FixedSizeCodec<AccountArgs, Account> {
  return combineCodec(getAccountEncoder(), getAccountDecoder());
}

export function decodeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Account, TAddress>;
export function decodeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Account, TAddress>;
export function decodeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Account, TAddress> | MaybeAccount<Account, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAccountDecoder()
  );
}

export async function fetchAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Account, TAddress>> {
  const maybeAccount = await fetchMaybeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Account, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAccount(maybeAccount);
}

export async function fetchAllAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Account>[]> {
  const maybeAccounts = await fetchAllMaybeAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Account>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAccount(maybeAccount));
}

export function getAccountSize(): number {
  return 32;
}
